{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4a525603",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: flask in c:\\users\\shric\\anaconda3\\lib\\site-packages (2.2.2)\n",
      "Requirement already satisfied: flask-cors in c:\\users\\shric\\anaconda3\\lib\\site-packages (4.0.0)\n",
      "Requirement already satisfied: reportlab in c:\\users\\shric\\anaconda3\\lib\\site-packages (4.0.6)\n",
      "Requirement already satisfied: sentence-transformers in c:\\users\\shric\\anaconda3\\lib\\site-packages (2.2.2)\n",
      "Requirement already satisfied: pdfplumber in c:\\users\\shric\\anaconda3\\lib\\site-packages (0.10.3)\n",
      "Requirement already satisfied: nltk in c:\\users\\shric\\anaconda3\\lib\\site-packages (3.7)\n",
      "Requirement already satisfied: Werkzeug>=2.2.2 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from flask) (2.2.2)\n",
      "Requirement already satisfied: Jinja2>=3.0 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from flask) (3.1.2)\n",
      "Requirement already satisfied: itsdangerous>=2.0 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from flask) (2.0.1)\n",
      "Requirement already satisfied: click>=8.0 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from flask) (8.0.4)\n",
      "Requirement already satisfied: pillow>=9.0.0 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from reportlab) (9.4.0)\n",
      "Requirement already satisfied: torchvision in c:\\users\\shric\\anaconda3\\lib\\site-packages (from sentence-transformers) (0.16.0)\n",
      "Requirement already satisfied: transformers<5.0.0,>=4.6.0 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from sentence-transformers) (4.24.0)\n",
      "Requirement already satisfied: tqdm in c:\\users\\shric\\anaconda3\\lib\\site-packages (from sentence-transformers) (4.64.1)\n",
      "Requirement already satisfied: scikit-learn in c:\\users\\shric\\anaconda3\\lib\\site-packages (from sentence-transformers) (1.2.1)\n",
      "Requirement already satisfied: numpy in c:\\users\\shric\\anaconda3\\lib\\site-packages (from sentence-transformers) (1.23.5)\n",
      "Requirement already satisfied: huggingface-hub>=0.4.0 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from sentence-transformers) (0.10.1)\n",
      "Requirement already satisfied: scipy in c:\\users\\shric\\anaconda3\\lib\\site-packages (from sentence-transformers) (1.10.0)\n",
      "Requirement already satisfied: sentencepiece in c:\\users\\shric\\anaconda3\\lib\\site-packages (from sentence-transformers) (0.1.99)\n",
      "Requirement already satisfied: torch>=1.6.0 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from sentence-transformers) (2.1.0)\n",
      "Requirement already satisfied: pdfminer.six==20221105 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from pdfplumber) (20221105)\n",
      "Requirement already satisfied: pypdfium2>=4.18.0 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from pdfplumber) (4.23.1)\n",
      "Requirement already satisfied: cryptography>=36.0.0 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from pdfminer.six==20221105->pdfplumber) (39.0.1)\n",
      "Requirement already satisfied: charset-normalizer>=2.0.0 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from pdfminer.six==20221105->pdfplumber) (2.0.4)\n",
      "Requirement already satisfied: regex>=2021.8.3 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from nltk) (2022.7.9)\n",
      "Requirement already satisfied: joblib in c:\\users\\shric\\anaconda3\\lib\\site-packages (from nltk) (1.1.1)\n",
      "Requirement already satisfied: colorama in c:\\users\\shric\\anaconda3\\lib\\site-packages (from click>=8.0->flask) (0.4.6)\n",
      "Requirement already satisfied: packaging>=20.9 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from huggingface-hub>=0.4.0->sentence-transformers) (22.0)\n",
      "Requirement already satisfied: filelock in c:\\users\\shric\\anaconda3\\lib\\site-packages (from huggingface-hub>=0.4.0->sentence-transformers) (3.9.0)\n",
      "Requirement already satisfied: requests in c:\\users\\shric\\anaconda3\\lib\\site-packages (from huggingface-hub>=0.4.0->sentence-transformers) (2.28.1)\n",
      "Requirement already satisfied: pyyaml>=5.1 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from huggingface-hub>=0.4.0->sentence-transformers) (6.0)\n",
      "Requirement already satisfied: typing-extensions>=3.7.4.3 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from huggingface-hub>=0.4.0->sentence-transformers) (4.8.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from Jinja2>=3.0->flask) (2.1.1)\n",
      "Requirement already satisfied: sympy in c:\\users\\shric\\anaconda3\\lib\\site-packages (from torch>=1.6.0->sentence-transformers) (1.11.1)\n",
      "Requirement already satisfied: networkx in c:\\users\\shric\\anaconda3\\lib\\site-packages (from torch>=1.6.0->sentence-transformers) (2.8.4)\n",
      "Requirement already satisfied: fsspec in c:\\users\\shric\\anaconda3\\lib\\site-packages (from torch>=1.6.0->sentence-transformers) (2022.11.0)\n",
      "Requirement already satisfied: tokenizers!=0.11.3,<0.14,>=0.11.1 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from transformers<5.0.0,>=4.6.0->sentence-transformers) (0.11.4)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from scikit-learn->sentence-transformers) (2.2.0)\n",
      "Requirement already satisfied: cffi>=1.12 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from cryptography>=36.0.0->pdfminer.six==20221105->pdfplumber) (1.15.1)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from requests->huggingface-hub>=0.4.0->sentence-transformers) (3.4)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from requests->huggingface-hub>=0.4.0->sentence-transformers) (2022.12.7)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from requests->huggingface-hub>=0.4.0->sentence-transformers) (1.26.14)\n",
      "Requirement already satisfied: mpmath>=0.19 in c:\\users\\shric\\anaconda3\\lib\\site-packages (from sympy->torch>=1.6.0->sentence-transformers) (1.2.1)\n",
      "Requirement already satisfied: pycparser in c:\\users\\shric\\anaconda3\\lib\\site-packages (from cffi>=1.12->cryptography>=36.0.0->pdfminer.six==20221105->pdfplumber) (2.21)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install flask flask-cors reportlab sentence-transformers pdfplumber nltk\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "44f5cce3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     C:\\Users\\shric\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n",
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     C:\\Users\\shric\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package wordnet to\n",
      "[nltk_data]     C:\\Users\\shric\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app '__main__'\n",
      " * Debug mode: on\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n",
      " * Running on http://127.0.0.1:5001\n",
      "Press CTRL+C to quit\n"
     ]
    }
   ],
   "source": [
    "from flask import Flask, request, jsonify\n",
    "from flask_cors import CORS\n",
    "from reportlab.lib.pagesizes import A4\n",
    "from reportlab.pdfgen import canvas\n",
    "from sentence_transformers import SentenceTransformer, util\n",
    "import pdfplumber\n",
    "import nltk\n",
    "import re\n",
    "import os\n",
    "\n",
    "app = Flask(__name__)\n",
    "CORS(app)\n",
    "\n",
    "# Download NLTK data (if not already downloaded)\n",
    "nltk.download('stopwords')\n",
    "nltk.download('punkt')\n",
    "nltk.download('wordnet')\n",
    "\n",
    "# Load BERT models\n",
    "model1 = SentenceTransformer('paraphrase-MiniLM-L3-v2')\n",
    "model2 = SentenceTransformer('all-distilroberta-v1')\n",
    "model3 = SentenceTransformer('multi-qa-distilbert-cos-v1')\n",
    "\n",
    "# Function to extract text from a PDF\n",
    "def extract_text_from_pdf(pdf_path):\n",
    "    with pdfplumber.open(pdf_path) as pdf:\n",
    "        text = \"\"\n",
    "        for page in pdf.pages:\n",
    "            text += page.extract_text()\n",
    "    return text\n",
    "\n",
    "# Function to process PDFs and return result\n",
    "@app.route('/process_pdfs', methods=['POST'])\n",
    "def process_pdfs():\n",
    "    try:\n",
    "        data = request.get_json()\n",
    "\n",
    "        # Extract PDF paths from the request\n",
    "        pdf_path1 = data.get('pdf_path1')\n",
    "        pdf_path2 = data.get('pdf_path2')\n",
    "\n",
    "        # Extract text from both PDF files\n",
    "        question_paper1_text = extract_text_from_pdf(pdf_path1)\n",
    "        question_paper2_text = extract_text_from_pdf(pdf_path2)\n",
    "\n",
    "        # Use regular expressions to split the text into individual questions\n",
    "        arr1 = re.split(r'\\d+\\.', question_paper1_text)\n",
    "        arr2 = re.split(r'\\d+\\.', question_paper2_text)\n",
    "\n",
    "        # Remove any leading or trailing whitespace from the questions\n",
    "        arr1 = [question.strip() for question in arr1 if question.strip()]\n",
    "        arr2 = [question.strip() for question in arr2 if question.strip()]\n",
    "\n",
    "        # Create an array to store the questions\n",
    "        arr1 = arr1\n",
    "        arr2 = arr2\n",
    "\n",
    "        new_paper = []\n",
    "\n",
    "        for q1 in arr1:\n",
    "            for q2 in arr2:\n",
    "                similarity = model(q1, q2)\n",
    "                if similarity > 0.7:\n",
    "                    new_paper.append(q1)\n",
    "                    break\n",
    "\n",
    "        # Add questions from question_paper2 that didn't have matches\n",
    "        for q2 in arr2:\n",
    "            if q2 not in new_paper:\n",
    "                new_paper.append(q2)\n",
    "\n",
    "        for q1 in arr1:\n",
    "            if q1 not in new_paper:\n",
    "                new_paper.append(q1)\n",
    "\n",
    "        # Create a PDF document with A4 page size\n",
    "        pdf_file = \"output.pdf\"\n",
    "        c = canvas.Canvas(pdf_file, pagesize=A4)\n",
    "\n",
    "        # Set font and other attributes\n",
    "        c.setFont(\"Helvetica\", 12)\n",
    "        line_height = 14\n",
    "        bottom_margin = 20\n",
    "\n",
    "        # Calculate the available height on the page\n",
    "        page_height = A4[1] - bottom_margin\n",
    "\n",
    "        # Initialize page count\n",
    "        page_number = 1\n",
    "\n",
    "        # Iterate through the list and add the content to the PDF with pagination\n",
    "        y_position = page_height\n",
    "\n",
    "        for index, content in enumerate(new_paper, start=1):\n",
    "            if y_position - line_height < 0:\n",
    "                # If the content would overflow, start a new page\n",
    "                c.showPage()\n",
    "                c.setFont(\"Helvetica\", 12)  # Reset font for the new page\n",
    "                y_position = page_height\n",
    "                page_number += 1\n",
    "\n",
    "            content_with_index = f\"{index}. {content}\"\n",
    "            c.drawString(20, y_position, content_with_index)\n",
    "            y_position -= line_height\n",
    "\n",
    "        # Save the PDF document\n",
    "        c.save()\n",
    "\n",
    "        response = {\n",
    "            'success': True,\n",
    "            'message': 'PDFs processed successfully.',\n",
    "            'pdf_file': pdf_file,\n",
    "        }\n",
    "        return jsonify(response)\n",
    "\n",
    "    except Exception as e:\n",
    "        error_response = {\n",
    "            'success': False,\n",
    "            'message': f'Error processing PDFs: {str(e)}'\n",
    "        }\n",
    "        return jsonify(error_response)\n",
    "\n",
    "# Run the Flask app\n",
    "# if __name__ == '__main__':\n",
    "#     app.run(debug=True)\n",
    "\n",
    "# if __name__ == '__main__':\n",
    "#     app.run(debug=True, port=5001)  # Change port number\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=True, port=5001, use_reloader=False)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "341c5061",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
